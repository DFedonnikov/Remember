plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'realm-android'
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "com.gnest.remember"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 14
        versionName "1.4"
        setProperty("archivesBaseName", applicationName + "-v" + versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs "en", "ru"
        lintOptions { checkReleaseBuilds false }
        vectorDrawables.useSupportLibrary true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        density {
            enable true
            exclude "ldpi", "tvdpi"
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }
    }

    flavorDimensions "version"

    productFlavors {

        development {
            dimension "version"
        }

        production {
            dimension "version"
        }

    }

    compileOptions {
        sourceCompatibility 11
        targetCompatibility 11
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.3.2"
    }
}

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4, 'xxxhdpi': 5]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        def baseDensityVersionCode = project.densityCodes.get(output.getFilter(OutputFile.DENSITY))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 1000
        }
        if (baseDensityVersionCode != null) {
            output.versionCodeOverride += baseDensityVersionCode * 100
        }

        output.versionCodeOverride += variant.versionCode
    }
}

dependencies {
    implementation(project(":core:designsystem"))
    implementation(project(":core:ui"))
    implementation(project(":feature:home"))
    implementation(project(":feature:finished"))
    implementation(project(":feature:search"))
    implementation(project(":feature:settings"))
    implementation(project(":feature:newnote"))

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)

    implementation(libs.room.runtime)
    kapt(libs.room.compiler)
    implementation(libs.room.ktx)
    testImplementation(libs.room.testing)

    implementation(libs.androidx.compose.activity)
    implementation(libs.androidx.compose.material)
    debugImplementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui.tooling.preview)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.lifecycle.viewModelCompose)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.core.ktx)
    implementation(libs.android.material)

    implementation(libs.accompanist.navigation.animation)
    implementation(libs.accompanist.systemuicontroller)

    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)

    implementation(libs.kotlinx.datetime)

    //Leakcanary
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    testImplementation(libs.junit4)
    androidTestImplementation(libs.junit4)
    implementation(libs.junit.ktx)

    androidTestImplementation(libs.androidx.test.core)

    testImplementation(libs.kotlinx.coroutines.test)
    androidTestImplementation(libs.kotlinx.coroutines.test)
}

kapt {
    correctErrorTypes true
}
