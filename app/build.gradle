apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.gnest.remember"
        minSdkVersion 18
        targetSdkVersion 27
        versionCode 11
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resConfigs "en", "ru"
        lintOptions { checkReleaseBuilds false }
        vectorDrawables.useSupportLibrary true
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
        }

        density {
            enable true
            exclude "ldpi", "tvdpi"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }
}

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a:': 2, mips: 3, x86: 4, x86_64: 5]
ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 3, 'xxxhdpi': 4, 'sw600dp': 5]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        def baseDensityVersionCode = project.densityCodes.get(output.getFilter(OutputFile.DENSITY))

        if (baseAbiVersionCode != null && baseDensityVersionCode != null) {
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 +
                            baseDensityVersionCode * 100 +
                            variant.versionCode
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Support libraries
    compile 'com.android.support:appcompat-v7:27.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:27.0.2'
    compile 'com.android.support:recyclerview-v7:27.0.2'
    compile 'com.android.support:design:27.0.2'
    compile 'com.android.support:preference-v14:27.0.2'

    // Comapact Calenar View
    compile 'com.github.sundeepk:compact-calendar-view:2.0.2.1'

    //Mosby
    compile 'com.hannesdorfmann.mosby3:mvp:3.1.0'
    compile 'com.hannesdorfmann.mosby3:viewstate:3.1.0'

    //rxJava
    compile 'io.reactivex:rxjava:1.3.2'
    compile 'io.reactivex:rxandroid:1.2.1'

    //Realm adapters
    compile 'io.realm:android-adapters:2.0.0'

    //BetterLinkMovementMethod
    compile 'me.saket:better-link-movement-method:2'

    //ButterKnife
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'

    //JUnit
    testCompile 'junit:junit:4.12'
}
